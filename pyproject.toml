[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "comfyui-arena-suite"
version = "4.2.4"
description = "ComfyUI custom nodes in a single package: Arena legacy + AutoCache + Updater"
readme = "README.md"
requires-python = ">=3.10"
license = {file = "LICENSE"}
dependencies = []

[tool.setuptools]
include-package-data = true
packages = [
    "custom_nodes.ComfyUI_Arena",
    "custom_nodes.ComfyUI_Arena.autocache",
    "custom_nodes.ComfyUI_Arena.legacy",
    "custom_nodes.ComfyUI_Arena.updater",
]

[tool.setuptools.data-files]
"docs" = ["docs/*.md"]
"docs/en" = ["docs/en/*.md"]
"docs/ru" = ["docs/ru/*.md"]

[tool.black]
line-length = 100

[tool.ruff]
target-version = "py310"
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "T20", # flake8-print
    "RET", # flake8-return
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected (for tests)
    "S311",  # suspicious non-cryptographic random usage
    "N999",  # invalid module name (for ComfyUI custom nodes)
    "T201",  # print statements (acceptable for ComfyUI nodes)
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["custom_nodes.ComfyUI_Arena"]
force-single-line = false
lines-after-imports = 2

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
error_summary = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "numpy.*",
    "PIL.*",
    "cv2.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["custom_nodes.ComfyUI_Arena"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]