---
alwaysApply: true
---

# Context Management Rules

## КРИТИЧЕСКИ ВАЖНО: Обязательное чтение концепции ноды

**В КАЖДОМ новом чате ПЕРВЫМ делом изучить концепцию ноды Arena AutoCache** - это критически важно для понимания логики работы и текущего состояния разработки.

## Управление концепцией ноды

### Обязательные правила:
- **Любые изменения в концепции ноды ТОЛЬКО с разрешения пользователя**
- Перед изменением ОБЯЗАТЕЛЬНО написать что планируется изменить и зачем
- Ждать подтверждения от пользователя
- Без разрешения - только чтение и анализ

### Формат запроса на изменение:
```
ПЛАНИРУЕМОЕ ИЗМЕНЕНИЕ В КОНЦЕПЦИИ НОДЫ:

Что изменяем: [конкретное описание]
Зачем: [обоснование]
Влияние на логику: [как это повлияет на общую логику]

Требуется разрешение пользователя для внесения изменений.
```

## Концепция ноды Arena AutoCache

### Реальная логика работы ноды:

**Arena AutoCache (simple) v4.5.0** - это система автоматического кеширования моделей ComfyUI с тремя режимами работы:

#### 1. **OnDemand режим (по умолчанию)**
- Кеширование только при первом обращении к модели
- Патчинг `folder_paths.get_full_path()` для перехвата загрузки
- Фоновое копирование в отдельном потоке
- Безопасный режим - кеширование отключено по умолчанию

#### 2. **Eager режим**
- Массовое копирование всех моделей при загрузке ComfyUI
- Анализ всех эффективных категорий моделей
- Копирование в фоновом режиме

#### 3. **Disabled режим**
- Полное отключение кеширования
- Использование оригинальных путей к моделям

### Состояния ноды и источники настроек:

1. **Установлена нода из репозитория** → при открытии ComfyUI и установке ноды на канвас все настройки по умолчанию ComfyUI, переключатель `enable_caching=False`
2. **Активация ноды** → пользователь включает переключатель `enable_caching=True`, создается .env файл, настройки из ноды записываются в .env, начинается кеширование при запуске Run в ComfyUI
3. **Повторный запуск ComfyUI** → если workflow с нодой, брать настройки из .env файла
4. **Новый workflow** → при добавлении ноды на канвас и ее активации подтягиваются настройки из .env, если не активна то по умолчанию ComfyUI

### Детальный workflow:

**1. Установка ноды из репозитория:**
- При открытии ComfyUI и установке ноды на канвас
- Все настройки по умолчанию ComfyUI (без .env файла)
- Нода неактивна, кеширование отключено

**2. Активация ноды:**
- Пользователь включает переключатель `enable_caching=True` в ноде
- Создается .env файл в `user/arena_autocache.env` с настройками по умолчанию
- Настройки из ноды записываются в .env файл
- При запуске Run в ComfyUI начинается кеширование
- Применяется патч `folder_paths` для перехвата загрузки моделей

**3. Повторный запуск ComfyUI:**
- Если workflow содержит **активную ноду** → настройки ноды перезаписывают .env файл (приоритет ноды)
- Если workflow содержит **неактивную ноду** → настройки по умолчанию ComfyUI
- Активная нода может использовать разные пути, а .env содержит общие настройки

**4. Новый workflow:**
- При добавлении ноды на канвас и ее активации → подтягиваются настройки из .env
- Если нода не активирована → настройки по умолчанию ComfyUI
- При активации → создается/обновляется .env файл

**5. Копирование или создание новой ноды на любой канвас:**
- При копировании или создании ноды на любой канвас и ее активации → подтягиваются настройки из .env
- Можно изменить настройки в ноде → они сохранятся в .env файл
- .env файл обновляется настройками из активной ноды

### Логика приоритетов настроек:

**Активная нода (enable_caching=True):**
- **Приоритет ноды** → настройки из ноды перезаписывают .env файл
- Позволяет использовать разные пути для разных workflow
- .env файл обновляется настройками из активной ноды

**Неактивная нода (enable_caching=False):**
- **Приоритет .env** → настройки берутся из .env файла
- Использует общие настройки для всех workflow
- Нода не влияет на .env файл

**При загрузке модели:**
- Проверяет наличие в кеше (SSD)
- Если есть → использует из кеша (cache hit)
- Если нет → копирует с NAS в фоне (cache miss)
- Возвращает оригинальный путь для загрузки

### Технические детали:

**Поддерживаемые категории моделей:**
- `checkpoints`, `loras`, `clip`, `vae`, `controlnet`
- `upscale_models`, `embeddings`, `hypernetworks`
- `gguf_models`, `unet_models`, `diffusion_models`

**Настройки через .env файл:**
- `ARENA_CACHE_ROOT` - путь к кешу
- `ARENA_CACHE_MIN_SIZE_MB` - минимальный размер файла
- `ARENA_CACHE_MAX_GB` - лимит кеша (0 = без лимита)
- `ARENA_CACHE_MODE` - режим (ondemand/eager/disabled)
- `ARENA_AUTO_CACHE_ENABLED` - включение авто-кеширования
- `ARENA_AUTOCACHE_AUTOPATCH` - автопатч при загрузке

**Переключатель активации:**
- `enable_caching` - основной переключатель активации кеширования
- По умолчанию `False` - кеширование отключено
- При `True` - активируется кеширование и создается .env файл
- Управляет отображением всех остальных настроек

**Безопасность:**
- По умолчанию кеширование ОТКЛЮЧЕНО
- Проверка глубины путей для предотвращения удаления корней
- Валидация всех настроек из .env файла
- Thread-safe операции с блокировками

### Текущие проблемы (открытые Issues):

**#116** - Переключатель активации кеширования:
- Нужен переключатель для активации кеширования
- Мгновенное обновление .env файла
- Показ настроек только после активации

**#113** - Проблема с deferred autopatch:
- Нода на канвасе, но кеширование не работает
- Deferred autopatch не сработал
- Нужна диагностика состояния

**#112** - Auto-extend категорий в .env:
- Автоматическое дополнение .env файла категориями из ноды
- При режиме "extend" - добавление недостающих категорий
- Удобство использования без ручного редактирования .env

**#110** - Автоматическое определение моделей:
- Анализ workflow для определения используемых моделей
- Автоматическое добавление категорий в кеширование
- Интеграция с ComfyUI API

### Статус разработки:
- ✅ **v4.5.0** - OnDemand режим реализован
- ✅ **Deferred autopatch** - глобальное кеширование без ноды
- ✅ **Поддержка .env** - полная интеграция с настройками
- ✅ **Безопасность** - проверки и валидация
- ✅ **Переключатель активации** - добавлен enable_caching для контроля кеширования
- 🔧 **Активные задачи** - 4 открытых Issue для улучшений

### Последние изменения (2025-09-30):
- Добавлен переключатель активации кеширования `enable_caching`
- Обновлен workflow активации ноды с обязательным включением переключателя
- Добавлена логика условного отображения настроек
- Инициатор: пользователь, влияние: улучшение UX и безопасности

## Структура файлов контекста

- `context.md` - центральный файл с концепцией ноды
- `CONTEXT_MANAGEMENT.md` - процесс управления context.md
- `CURSOR_SETUP.md` - общие правила (НЕ ТРОГАТЬ без разрешения)

## Интеграция с GitHub Issues

При изменении context.md:
1. Создать Issue с описанием изменения
2. В Issue указать ссылку на context.md
3. После изменения - закрыть Issue с комментарием о внесенных изменениях
4. Обновить CHANGELOG.md если изменение критично

## Контроль версий context.md

### Обязательные поля в "Последние изменения":
- Дата изменения
- Что именно изменилось
- Кто инициировал изменение
- Влияние на разработку

### Пример:
```
### Последние изменения (2024-01-15)
- Добавлено описание состояния "нода на канвасе но не активирована"
- Уточнена логика работы с NAS настройками
- Инициатор: пользователь, влияние: уточнение workflow
```

## Что НЕ требует разрешения:
- Чтение и анализ context.md
- Обновление раздела "Последние изменения" (только после согласованных изменений)
- Исправление опечаток (но лучше спросить)

## Что ТРЕБУЕТ разрешения:
- Любые изменения в логике работы ноды
- Добавление новых состояний или источников настроек
- Изменение концепции NAS/env файлов
- Модификация workflow ноды# Context Management Rules

## КРИТИЧЕСКИ ВАЖНО: Обязательное чтение концепции ноды

**В КАЖДОМ новом чате ПЕРВЫМ делом изучить концепцию ноды Arena AutoCache** - это критически важно для понимания логики работы и текущего состояния разработки.

## Управление концепцией ноды

### Обязательные правила:
- **Любые изменения в концепции ноды ТОЛЬКО с разрешения пользователя**
- Перед изменением ОБЯЗАТЕЛЬНО написать что планируется изменить и зачем
- Ждать подтверждения от пользователя
- Без разрешения - только чтение и анализ

### Формат запроса на изменение:
```
ПЛАНИРУЕМОЕ ИЗМЕНЕНИЕ В КОНЦЕПЦИИ НОДЫ:

Что изменяем: [конкретное описание]
Зачем: [обоснование]
Влияние на логику: [как это повлияет на общую логику]

Требуется разрешение пользователя для внесения изменений.
```

## Концепция ноды Arena AutoCache

### Реальная логика работы ноды:

**Arena AutoCache (simple) v4.5.0** - это система автоматического кеширования моделей ComfyUI с тремя режимами работы:

#### 1. **OnDemand режим (по умолчанию)**
- Кеширование только при первом обращении к модели
- Патчинг `folder_paths.get_full_path()` для перехвата загрузки
- Фоновое копирование в отдельном потоке
- Безопасный режим - кеширование отключено по умолчанию

#### 2. **Eager режим**
- Массовое копирование всех моделей при загрузке ComfyUI
- Анализ всех эффективных категорий моделей
- Копирование в фоновом режиме

#### 3. **Disabled режим**
- Полное отключение кеширования
- Использование оригинальных путей к моделям

### Состояния ноды и источники настроек:

1. **Установлена нода из репозитория** → при открытии ComfyUI и установке ноды на канвас все настройки по умолчанию ComfyUI, переключатель `enable_caching=False`
2. **Активация ноды** → пользователь включает переключатель `enable_caching=True`, создается .env файл, настройки из ноды записываются в .env, начинается кеширование при запуске Run в ComfyUI
3. **Повторный запуск ComfyUI** → если workflow с нодой, брать настройки из .env файла
4. **Новый workflow** → при добавлении ноды на канвас и ее активации подтягиваются настройки из .env, если не активна то по умолчанию ComfyUI

### Детальный workflow:

**1. Установка ноды из репозитория:**
- При открытии ComfyUI и установке ноды на канвас
- Все настройки по умолчанию ComfyUI (без .env файла)
- Нода неактивна, кеширование отключено

**2. Активация ноды:**
- Пользователь включает переключатель `enable_caching=True` в ноде
- Создается .env файл в `user/arena_autocache.env` с настройками по умолчанию
- Настройки из ноды записываются в .env файл
- При запуске Run в ComfyUI начинается кеширование
- Применяется патч `folder_paths` для перехвата загрузки моделей

**3. Повторный запуск ComfyUI:**
- Если workflow содержит **активную ноду** → настройки ноды перезаписывают .env файл (приоритет ноды)
- Если workflow содержит **неактивную ноду** → настройки по умолчанию ComfyUI
- Активная нода может использовать разные пути, а .env содержит общие настройки

**4. Новый workflow:**
- При добавлении ноды на канвас и ее активации → подтягиваются настройки из .env
- Если нода не активирована → настройки по умолчанию ComfyUI
- При активации → создается/обновляется .env файл

**5. Копирование или создание новой ноды на любой канвас:**
- При копировании или создании ноды на любой канвас и ее активации → подтягиваются настройки из .env
- Можно изменить настройки в ноде → они сохранятся в .env файл
- .env файл обновляется настройками из активной ноды

### Логика приоритетов настроек:

**Активная нода (enable_caching=True):**
- **Приоритет ноды** → настройки из ноды перезаписывают .env файл
- Позволяет использовать разные пути для разных workflow
- .env файл обновляется настройками из активной ноды

**Неактивная нода (enable_caching=False):**
- **Приоритет .env** → настройки берутся из .env файла
- Использует общие настройки для всех workflow
- Нода не влияет на .env файл

**При загрузке модели:**
- Проверяет наличие в кеше (SSD)
- Если есть → использует из кеша (cache hit)
- Если нет → копирует с NAS в фоне (cache miss)
- Возвращает оригинальный путь для загрузки

### Технические детали:

**Поддерживаемые категории моделей:**
- `checkpoints`, `loras`, `clip`, `vae`, `controlnet`
- `upscale_models`, `embeddings`, `hypernetworks`
- `gguf_models`, `unet_models`, `diffusion_models`

**Настройки через .env файл:**
- `ARENA_CACHE_ROOT` - путь к кешу
- `ARENA_CACHE_MIN_SIZE_MB` - минимальный размер файла
- `ARENA_CACHE_MAX_GB` - лимит кеша (0 = без лимита)
- `ARENA_CACHE_MODE` - режим (ondemand/eager/disabled)
- `ARENA_AUTO_CACHE_ENABLED` - включение авто-кеширования
- `ARENA_AUTOCACHE_AUTOPATCH` - автопатч при загрузке

**Переключатель активации:**
- `enable_caching` - основной переключатель активации кеширования
- По умолчанию `False` - кеширование отключено
- При `True` - активируется кеширование и создается .env файл
- Управляет отображением всех остальных настроек

**Безопасность:**
- По умолчанию кеширование ОТКЛЮЧЕНО
- Проверка глубины путей для предотвращения удаления корней
- Валидация всех настроек из .env файла
- Thread-safe операции с блокировками

### Текущие проблемы (открытые Issues):

**#116** - Переключатель активации кеширования:
- Нужен переключатель для активации кеширования
- Мгновенное обновление .env файла
- Показ настроек только после активации

**#113** - Проблема с deferred autopatch:
- Нода на канвасе, но кеширование не работает
- Deferred autopatch не сработал
- Нужна диагностика состояния

**#112** - Auto-extend категорий в .env:
- Автоматическое дополнение .env файла категориями из ноды
- При режиме "extend" - добавление недостающих категорий
- Удобство использования без ручного редактирования .env

**#110** - Автоматическое определение моделей:
- Анализ workflow для определения используемых моделей
- Автоматическое добавление категорий в кеширование
- Интеграция с ComfyUI API

### Статус разработки:
- ✅ **v4.5.0** - OnDemand режим реализован
- ✅ **Deferred autopatch** - глобальное кеширование без ноды
- ✅ **Поддержка .env** - полная интеграция с настройками
- ✅ **Безопасность** - проверки и валидация
- ✅ **Переключатель активации** - добавлен enable_caching для контроля кеширования
- 🔧 **Активные задачи** - 4 открытых Issue для улучшений

### Последние изменения (2025-09-30):
- Добавлен переключатель активации кеширования `enable_caching`
- Обновлен workflow активации ноды с обязательным включением переключателя
- Добавлена логика условного отображения настроек
- Инициатор: пользователь, влияние: улучшение UX и безопасности

## Структура файлов контекста

- `context.md` - центральный файл с концепцией ноды
- `CONTEXT_MANAGEMENT.md` - процесс управления context.md
- `CURSOR_SETUP.md` - общие правила (НЕ ТРОГАТЬ без разрешения)

## Интеграция с GitHub Issues

При изменении context.md:
1. Создать Issue с описанием изменения
2. В Issue указать ссылку на context.md
3. После изменения - закрыть Issue с комментарием о внесенных изменениях
4. Обновить CHANGELOG.md если изменение критично

## Контроль версий context.md

### Обязательные поля в "Последние изменения":
- Дата изменения
- Что именно изменилось
- Кто инициировал изменение
- Влияние на разработку

### Пример:
```
### Последние изменения (2024-01-15)
- Добавлено описание состояния "нода на канвасе но не активирована"
- Уточнена логика работы с NAS настройками
- Инициатор: пользователь, влияние: уточнение workflow
```

## Что НЕ требует разрешения:
- Чтение и анализ context.md
- Обновление раздела "Последние изменения" (только после согласованных изменений)
- Исправление опечаток (но лучше спросить)

## Что ТРЕБУЕТ разрешения:
- Любые изменения в логике работы ноды
- Добавление новых состояний или источников настроек
- Изменение концепции NAS/env файлов
- Модификация workflow ноды
### Последние изменения (2025-10-01):
- **✅ Issue #120 РЕАЛИЗОВАН** - Автоматическое определение моделей для кеширования
- **Deferred autopatch** - глобальное кеширование без ноды на канвасе
- **Патчинг folder_paths** - перехват загрузки моделей через `get_full_path()`
- **Фоновое копирование** - модели копируются в отдельном потоке
- **OnDemand режим** - кеширование только при первом обращении к модели
- **Безопасность** - кеширование отключено по умолчанию, активируется через `enable_caching=True`
- Исправлена логика значений по умолчанию в ноде - все настройки теперь 0/False/disabled при первом запуске
- Добавлена функция очистки переменных окружения _cleanup_env_variables()
- Упрощена логика создания .env файла - создается только при активации enable_caching=True
- Инициатор: пользователь, влияние: полная реализация автоматического кеширования моделей
