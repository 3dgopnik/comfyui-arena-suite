---
type: Auto Attached
name: ComfyUI Node Contract
description: Контракт и стиль для Python-нод ComfyUI.
globs: ["src/**/nodes/**/*.py", "src/**/nodes/*.py", "**/nodes/**/*.py", "**/nodes/*.py"]
---

## Контракт ноды
- Обязательные символы: `INPUT_TYPES` (classmethod), `RETURN_TYPES`, `FUNCTION`, `CATEGORY`.
- Опционально: `OUTPUT_NODE`.
- Регистрация: `NODE_CLASS_MAPPINGS` и `NODE_DISPLAY_NAME_MAPPINGS`.
- Один публичный класс-нода на файл, имя заканчивается на `Node`.

## Качество
- Полная типизация (PEP 484), docstrings (Google или NumPy).
- Валидация входных параметров, понятные исключения.
- Чистые функции, по возможности изоляция сайд-эффектов.

## Заголовок файла
```python
"""
@file: {filename}
@description: {summary}
@dependencies: {deps}
@created: {date}
"""
```

## Пример
```python
from __future__ import annotations
from typing import Any, Dict, Tuple

class ExampleAddNode:
    """Add two numbers and return the sum."""

    @classmethod
    def INPUT_TYPES(cls) -> Dict[str, Dict[str, Any]]:
        return {"required": {
            "a": ("FLOAT", {"default": 0.0, "min": -1e9, "max": 1e9, "step": 0.01}),
            "b": ("FLOAT", {"default": 0.0, "min": -1e9, "max": 1e9, "step": 0.01}),
        }}

    RETURN_TYPES = ("FLOAT",)
    FUNCTION = "compute"
    CATEGORY = "Arena/Math"

    def compute(self, a: float, b: float) -> Tuple[float]:
        if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):
            raise TypeError("a and b must be numeric")
        return (float(a) + float(b),)

NODE_CLASS_MAPPINGS = {"ExampleAddNode": ExampleAddNode}
NODE_DISPLAY_NAME_MAPPINGS = {"ExampleAddNode": "Arena — Add (a + b)"}
```

## Типизация ComfyUI
- `("IMAGE",)` - тензор изображения
- `("MASK",)` - маска
- `("LATENT",)` - латентное представление
- `("CONDITIONING",)` - conditioning для модели
- `("MODEL",)` - модель
- `("VAE",)` - VAE модель
- `("CLIP",)` - CLIP модель
- `("STRING", {"multiline": True})` - многострочный текст
- `("INT", {"default": 512, "min": 1, "max": 4096})` - целое число
- `("FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.1})` - число с плавающей точкой
- `("BOOLEAN", {"default": False})` - булево значение
- `("COMBO", {"choices": ["option1", "option2"]})` - выпадающий список

## Обработка ошибок
```python
def compute(self, **kwargs) -> Tuple[Any, ...]:
    try:
        # основная логика
        result = self._process_inputs(kwargs)
        return result
    except Exception as e:
        error_msg = f"Arena Node Error: {str(e)}"
        raise RuntimeError(error_msg) from e
```