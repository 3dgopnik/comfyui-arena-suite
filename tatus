warning: in the working copy of 'custom_nodes/ComfyUI_Arena/autocache/arena_auto_cache.py', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/custom_nodes/ComfyUI_Arena/autocache/arena_auto_cache.py b/custom_nodes/ComfyUI_Arena/autocache/arena_auto_cache.py[m
[1mindex fb90705..7ac5dd9 100644[m
[1m--- a/custom_nodes/ComfyUI_Arena/autocache/arena_auto_cache.py[m
[1m+++ b/custom_nodes/ComfyUI_Arena/autocache/arena_auto_cache.py[m
[36m@@ -254,53 +254,77 @@[m [mdef _load_active_workflow(force_refresh: bool = False) -> object | None:[m
 [m
     prompt_queue = getattr(prompt_server, "prompt_queue", None)[m
     if prompt_queue is not None:[m
[31m-        for attr in ("workflow", "current_prompt", "current_workflow", "last_prompt", "last_workflow"):[m
[31m-            if hasattr(prompt_queue, attr):[m
[31m-                candidates.append(getattr(prompt_queue, attr))[m
[32m+[m[32m        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ workflow –≤ ComfyUI Desktop[m
[32m+[m[32m        if hasattr(prompt_queue, "get_current_queue"):[m
[32m+[m[32m            try:[m
[32m+[m[32m                running, queued = prompt_queue.get_current_queue()[m
[32m+[m[32m                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏[m
[32m+[m[32m                for item in running:[m
[32m+[m[32m                    if isinstance(item, dict) and "prompt" in item:[m
[32m+[m[32m                        candidates.append(item["prompt"])[m
[32m+[m[32m                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å[m
[32m+[m[32m                for item in queued:[m
[32m+[m[32m                    if isinstance(item, (list, tuple)) and len(item) >= 2:[m
[32m+[m[32m                        prompt_data = item[1][m
[32m+[m[32m                        if isinstance(prompt_data, dict) and "prompt" in prompt_data:[m
[32m+[m[32m                            candidates.append(prompt_data["prompt"])[m
[32m+[m[32m            except Exception:[m
[32m+[m[32m                pass[m
[32m+[m[41m        [m
[32m+[m[32m        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)[m
         for method_name in ("get_current_prompt", "get_current_workflow", "get_last_prompt", "peek"):[m
             method = getattr(prompt_queue, method_name, None)[m
             if callable(method):[m
                 try:[m
[31m-                    candidates.append(method())[m
[31m-                except TypeError:[m
[31m-                    try:[m
[31m-                        candidates.append(method(None))[m
[31m-                    except Exception:[m
[31m-                        pass[m
[32m+[m[32m                    result = method()[m
[32m+[m[32m                    if isinstance(result, dict) and "prompt" in result:[m
[32m+[m[32m                        candidates.append(result["prompt"])[m
[32m+[m[32m                    else:[m
[32m+[m[32m                        candidates.append(result)[m
                 except Exception:[m
                     pass[m
[32m+[m[41m        [m
[32m+[m[32m        # –ü–æ–∏—Å–∫ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞–ø—Ä—è–º—É—é[m
         queue_data = getattr(prompt_queue, "queue", None)[m
         if isinstance(queue_data, list):[m
[31m-            candidates.extend(reversed(queue_data))[m
[31m-[m
[31m-    for attr in ("workflow", "last_prompt", "last_workflow", "current_workflow", "current_prompt"):[m
[32m+[m[32m            for item in reversed(queue_data):[m
[32m+[m[32m                if isinstance(item, (list, tuple)) and len(item) >= 2:[m
[32m+[m[32m                    prompt_data = item[1][m
[32m+[m[32m                    if isinstance(prompt_data, dict) and "prompt" in prompt_data:[m
[32m+[m[32m                        candidates.append(prompt_data["prompt"])[m
[32m+[m[41m        [m
[32m+[m[32m        # –ü–æ–∏—Å–∫ –≤ –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á–∞—Ö[m
[32m+[m[32m        currently_running = getattr(prompt_queue, "currently_running", None)[m
[32m+[m[32m        if isinstance(currently_running, dict):[m
[32m+[m[32m            for item in currently_running.values():[m
[32m+[m[32m                if isinstance(item, dict) and "prompt" in item:[m
[32m+[m[32m                    candidates.append(item["prompt"])[m
[32m+[m
[32m+[m[32m    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ PromptServer[m
[32m+[m[32m    for attr in ("workflow", "current_workflow", "current_prompt"):[m
         if hasattr(prompt_server, attr):[m
             candidates.append(getattr(prompt_server, attr))[m
[31m-    for method_name in ("get_current_prompt", "get_last_prompt", "get_current_workflow", "get_last_workflow"):[m
[32m+[m[41m    [m
[32m+[m[32m    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã PromptServer[m
[32m+[m[32m    for method_name in ("get_current_prompt", "get_current_workflow"):[m
         method = getattr(prompt_server, method_name, None)[m
         if callable(method):[m
             try:[m
[31m-                candidates.append(method())[m
[32m+[m[32m                result = method()[m
[32m+[m[32m                if isinstance(result, dict) and "prompt" in result:[m
[32m+[m[32m                    candidates.append(result["prompt"])[m
[32m+[m[32m                else:[m
[32m+[m[32m                    candidates.append(result)[m
             except Exception:[m
                 pass[m
[31m-    [m
[31m-    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ execution context[m
[31m-    if hasattr(prompt_server, 'execution_context'):[m
[31m-        exec_context = getattr(prompt_server, 'execution_context')[m
[31m-        if exec_context and hasattr(exec_context, 'workflow'):[m
[31m-            candidates.append(getattr(exec_context, 'workflow'))[m
[31m-    [m
[31m-    # –ü–æ–∏—Å–∫ –≤ graph context[m
[31m-    if hasattr(prompt_server, 'graph'):[m
[31m-        graph = getattr(prompt_server, 'graph')[m
[31m-        if graph and hasattr(graph, 'workflow'):[m
[31m-            candidates.append(getattr(graph, 'workflow'))[m
 [m
     for candidate in candidates:[m
         extracted = _extract(candidate)[m
         if extracted is not None:[m
             return extracted[m
 [m
[32m+[m[32m    # Fallback: –µ—Å–ª–∏ workflow –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None[m
[32m+[m[32m    # –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ workflow[m
     return None[m
 [m
 [m
[36m@@ -557,6 +581,7 @@[m [mdef register_workflow_items([m
 [m
     effective_workflow = _resolve_workflow_json(workflow_json)[m
     parsed = parse_items_spec(items, effective_workflow, default_category)[m
[32m+[m[41m    [m
     # Fallback: –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∏–∑ –≤–æ—Ä–∫—Ñ–ª–æ—É, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å[m
     # –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å[m
     # —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–∂–µ –ø—Ä–∏ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –≤–æ—Ä–∫—Ñ–ª–æ—É.[m
[36m@@ -573,6 +598,9 @@[m [mdef register_workflow_items([m
                     parsed = [{"category": _normalize_category_name(default_category, "checkpoints"), "name": name}][m
         except Exception:[m
             pass[m
[32m+[m[41m    [m
[32m+[m[32m    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫[m
[32m+[m[32m    # –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤ workflow –Ω–µ—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è[m
     _set_workflow_allowlist(parsed)[m
     return parsed[m
 [m
[36m@@ -3589,12 +3617,15 @@[m [mclass ArenaAutoCacheRefreshWorkflow:[m
         # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π workflow[m
         workflow = _load_active_workflow(force_refresh=True)[m
         [m
[32m+[m[32m        # –ü—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è[m
[32m+[m[32m        test_parsed = register_workflow_items("", workflow, "checkpoints")[m
[32m+[m[41m        [m
         if workflow:[m
             workflow_str = json.dumps(workflow, indent=2) if isinstance(workflow, dict) else str(workflow)[m
[31m-            show_text = "‚úÖ Workflow refreshed successfully"[m
[32m+[m[32m            workflow_status = "Found"[m
         else:[m
             workflow_str = "{}"[m
[31m-            show_text = "‚ö†Ô∏è No active workflow found"[m
[32m+[m[32m            workflow_status = "Not found"[m
         [m
         summary = {[m
             "ok": True,[m
[36m@@ -3603,7 +3634,9 @@[m [mclass ArenaAutoCacheRefreshWorkflow:[m
                 "details": [[m
                     "Status: Refreshed",[m
                     "Allowlist: Cleared",[m
[31m-                    "Workflow: " + ("Found" if workflow else "Not found"),[m
[32m+[m[32m                    f"Workflow: {workflow_status}",[m
[32m+[m[32m                    f"Parsed items: {len(test_parsed)}",[m
[32m+[m[32m                    f"Items: {[item.get('name', 'unknown') for item in test_parsed[:3]]}",[m
                 ],[m
             },[m
         }[m
[36m@@ -3611,6 +3644,1399 @@[m [mclass ArenaAutoCacheRefreshWorkflow:[m
         return (workflow_str, json.dumps(summary, ensure_ascii=False, indent=2))[m
 [m
 [m
[32m+[m[32mclass ArenaAutoCachePrewarm:[m
[32m+[m[32m    """RU: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∏–∑ workflow –¥–æ –∑–∞–ø—É—Å–∫–∞.[m
[32m+[m
[32m+[m[32m    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç workflow –∏ –∫–µ—à–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥–µ–ª–∏ –∑–∞—Ä–∞–Ω–µ–µ,[m
[32m+[m[32m    —á—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ. –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º workflow JSON.[m
[32m+[m[32m    """[m
[32m+[m
[32m+[m[32m    @classmethod[m
[32m+[m[32m    def INPUT_TYPES(cls):  # noqa: N802[m
[32m+[m[32m        return {[m
[32m+[m[32m            "required": {},[m
[32m+[m[32m            "optional": {[m
[32m+[m[32m                "workflow_json": ([m
[32m+[m[32m                    "STRING",[m
[32m+[m[32m                    {[m
[32m+[m[32m                        "default": "",[m
[32m+[m[32m                        "multiline": True,[m
[32m+[m[32m                        "description": "Workflow JSON (auto-detected if empty)",[m
[32m+[m[32m                        "tooltip": "Leave empty to auto-detect current workflow",[m
[32m+[m[32m                    },[m
[32m+[m[32m                ),[m
[32m+[m[32m                "auto_start": ([m
[32m+[m[32m                    "BOOLEAN",[m
[32m+[m[32m                    {[m
[32m+[m[32m                        "default": True,[m
[32m+[m[32m                        "description": "Auto start prewarming",[m
[32m+[m[32m                        "tooltip": "Automatically start prewarming models",[m
[32m+[m[32m                    },[m
[32m+[m[32m                ),[m
[32m+[m[32m                "categories": ([m
[32m+[m[32m                    "STRING",[m
[32m+[m[32m                    {[m
[32m+[m[32m                        "default": "checkpoints,loras",[m
[32m+[m[32m                        "description": "Categories to prewarm (comma-separated)",[m
[32m+[m[32m                        "tooltip": "List of model categories to include in prewarming",[m
[32m+[m[32m                    },[m
[32m+[m[32m                ),[m
[32m+[m[32m            },[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m    RETURN_TYPES = ("STRING", "STRING", "STRING")[m
[32m+[m[32m    RETURN_NAMES = (t("output.json"), t("output.summary_json"), "workflow_json")[m
[32m+[m[32m    RETURN_DESCRIPTIONS = RETURN_NAMES[m
[32m+[m[32m    OUTPUT_TOOLTIPS = RETURN_NAMES[m
[32m+[m[32m    FUNCTION = "run"[m
[32m+[m[32m    CATEGORY = "Arena/AutoCache/Utils"[m
[32m+[m[32m    DESCRIPTION = "Prewarm models from workflow before execution"[m
[32m+[m[32m    OUTPUT_NODE = True[m
[32m+[m
[32m+[m[32m    def run(self, workflow_json: str = "", auto_start: bool = True, categories: str = "checkpoints,loras,controlnet,upscale_models,clip_vision,ipadapter,insightface,vae,clip"):[m
[32m+[m[32m        """Analyze workflow and prewarm models."""[m
[32m+[m[32m        # –ï—Å–ª–∏ workflow –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π[m
[32m+[m[32m        if not workflow_json.strip():[m
[32m+[m[32m            workflow_json = _resolve_workflow_json("", force_refresh=True)[m
[32m+[m[32m            if not workflow_json:[m
[32m+[m[32m                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π workflow[m
[32m+[m[32m                try:[m
[32m+[m[32m                    comfyui_path = Path("C:/ComfyUI")[m
[32m+[m[32m                    if comfyui_path.exists():[m
[32m+[m[32m                        # –ò—â–µ–º –≤ –ø–∞–ø–∫–µ workflows[m
[32m+[m[32m                        workflows_path = comfyui_path / "workflows"[m
[32m+[m[32m                        if workflows_path.exists():[m
[32m+[m[32m                            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π .json —Ñ–∞–π–ª[m
[32m+[m[32m                            json_files = list(workflows_path.glob("*.json"))[m
[32m+[m[32m                            if json_files:[m
[32m+[m[32m                                latest_file = max(json_files, key=lambda f: f.stat().st_mtime)[m
[32m+[m[32m                                with open(latest_file, 'r', encoding='utf-8') as f:[m
[32m+[m[32m                                    workflow_json = json.load(f)[m
[32m+[m[41m                                [m
[32m+[m[32m                                summary = {[m
[32m+[m[32m                                    "ok": True,[m
[32m+[m[32m                                    "ui": {[m
[32m+[m[32m                                        "headline": f"Prewarm: Using latest workflow",[m
[32m+[m[32m                                        "details": [[m
[32m+[m[32m                                            f"File: {latest_file.name}",[m
[32m+[m[32m                                            "Found saved workflow file",[m
[32m+[m[32m                                            "Analyzing models...",[m
[32m+[m[32m                                        ],[m
[32m+[m[32m                                    },[m
[32m+[m[32m                                }[m
[32m+[m[32m                            else:[m
[32m+[m[32m                                summary = {[m
[32m+[m[32m                                    "ok": False,[m
[32m+[m[32m                                    "ui": {[m
[32m+[m[32m                                        "headline": "Prewarm: No workflow found",[m
[32m+[m[32m                                        "details": [[m
[32m+[m[32m                                            "No active workflow detected",[m
[32m+[m[32m                                            "No saved workflow files found",[m
[32m+[m[32m                                            "Create a workflow with models first",[m
[32m+[m[32m                                        ],[m
[32m+[m[32m                                    },[m
[32m+[m[32m                                }[m
[32m+[m[32m                                return ("{}", json.dumps(summary, ensure_ascii=False, indent=2), "{}")[m
[32m+[m[32m                        else:[m
[32m+[m[32m                            summary = {[m
[32m+[m[32m                                "ok": False,[m
[32m+[m[32m                                "ui": {[m
[32m+[m[32m                                    "headline": "Prewarm: No workflow found",[m
[32m+[m[32m                                    "details": [[m
[32m+[m[32m                                        "No active workflow detected",[m
[32m+[m[32m                                        "No workflows folder found",[m
[32m+[m[32m                                        "Create a workflow with models first",[m
[32m+[m[32m                                    ],[m
[32m+[m[32m                                },[m
[32m+[m[32m                            }[m
[32m+[m[32m                            return ("{}", j